import xml.etree.ElementTree as ET
from os import listdir
from pathlib import Path

from common import get_env_variable, get_env_variable_required


def get_files_by_extension(file_path, file_extension):
    files = []

    for file in listdir(file_path):
        if file.endswith(file_extension):
            files.append(file)

    return files


def load_properties(filepath: str, sep="=", comment_char="#") -> dict:
    """
    Read the file passed as parameter as a properties file and return as a dict.
    """

    def _get_properties_from_path(path: Path):
        with open(path, "rt", encoding="utf-8") as property_file:
            for line in property_file:
                if line.strip() and not line.strip().startswith(comment_char):
                    key_value = line.strip().split(sep)
                    if len(key_value) > 1:
                        key = key_value[0].strip()
                        value = sep.join(key_value[1:]).strip().strip('"')
                        properties[key] = value

    properties = {}
    path = Path(filepath)
    if path.is_file():
        try:
            _get_properties_from_path(path)
        except UnicodeError as error:
            raise UnicodeError(
                f"The file contains non-Unicode characters, please replace them: {error}"
            ) from error

    return properties


def get_xml_namespace_and_root_element(path: str) -> tuple:
    """
    Read the file passed as parameter as a XML file and return the namespace and the Element.
    """

    tree = ET.parse(path)
    root = tree.getroot()
    namespace = {"mvn": root.tag[1 : root.tag.index("}")]}

    return namespace, root


def get_pom_xml_property(property_name: str) -> str:
    """
    Read pom.xml and return the value of a property.
    """

    namespace, root = get_xml_namespace_and_root_element("pom.xml")

    property_value = root.find(f"mvn:{property_name}", namespace)

    return property_value.text


def load_sdl_properties() -> dict:
    return load_properties("sdl.properties")


def get_svc_name():
    """
    Get name of the service.
    """

    sci_svc_name = get_env_variable("SCI_SVC_NAME")

    if not sci_svc_name:
        generator_app_name_property = "generator.app.name"
        properties = load_sdl_properties()

        if generator_app_name_property in properties:
            sci_svc_name = properties[generator_app_name_property]
        elif Path("pom.xml").is_file():
            sci_svc_name = get_pom_xml_property("artifactId")
        else:
            sci_svc_name = get_env_variable_required("CI_PROJECT_NAME").replace(
                "-backend", ""
            )

    return sci_svc_name
