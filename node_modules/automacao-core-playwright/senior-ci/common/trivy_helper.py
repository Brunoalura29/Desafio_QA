"""Module of Trivy Scanner commands"""

import os
import sys
from typing import List

from colorama import Fore

sys.path.append("./senior-ci")

from docker import get_image_name, load_image

from . import (
    ExitCode,
    exec_command,
    exit_message,
    get_env_variable,
    get_env_variable_required,
    is_path_exist,
    print_message,
)

TRIVY_ERROR = "Houve um erro ao rodar o trivy, entre em contato com o time de DevOps"


def scan_vulnerabilities(sources_list: List[str], custom_args="") -> None:
    if not is_path_exist("trivy"):
        os.mkdir("trivy")

    for source in sources_list:
        source = source.replace("./", "")
        report_name = os.path.splitext(source)[0].replace("/", "_")
        exec_command(
            f'trivy fs {custom_args} --ignore-unfixed --scanners vuln --skip-dirs "senior-ci" '
            f"--format=json --output=trivy/trivy_{report_name}.json {source}",
            error_message=TRIVY_ERROR,
        )
        exec_command(
            f"trivy sonarqube trivy/trivy_{report_name}.json > trivy/{report_name}_sonar_report.json",
            error_message=TRIVY_ERROR,
        )


def scan_image() -> None:
    image_name = get_image_name()
    load_image(image_name)

    if not is_path_exist("trivy"):
        os.mkdir("trivy")
    sci_dockerfile_path = get_env_variable("SCI_DOCKERFILE_PATH", "Dockerfile")

    exec_command(
        f"trivy image --ignore-unfixed --scanners vuln --format=json "
        f"--output=trivy/trivy_{image_name}.json seniorsa/{image_name}",
        error_message=TRIVY_ERROR,
    )
    exec_command(
        f"trivy sonarqube trivy/trivy_{image_name}.json "
        f"--filePath={sci_dockerfile_path}> trivy/{image_name}_sonar_report.json",
        error_message=TRIVY_ERROR,
    )


def read_trivy_reports():
    results = []

    if is_path_exist("trivy/trivy_vulnerabilities.json"):
        print_message(
            "Realizando leitura dos reports de vulnerabilidade do projeto do Trivy"
        )
        vulnerabilities_result = exec_command(
            "trivy convert --severity=HIGH,CRITICAL --exit-code 1 trivy/trivy_vulnerabilities.json",
            print_command=False,
            print_output=False,
        )
        results.append(vulnerabilities_result.exit_code)

    if is_path_exist("trivy/trivy_image.json"):
        print_message(
            "Realizando leitura dos reports de vulnerabilidades em imagens Docker do Trivy"
        )
        image_result = exec_command(
            "trivy convert --severity=HIGH,CRITICAL --exit-code 1 trivy/trivy_image.json",
            print_command=False,
            print_output=False,
        )
        results.append(image_result.exit_code)

    if ExitCode.ERROR in results:
        issues_url = "https://sonar.senior.com.br/project/issues"
        sonar_project_key = get_env_variable_required("CI_PROJECT_PATH_SLUG").replace(
            "/", "-"
        )
        ci_commit_branch = get_env_variable_required("CI_COMMIT_REF_NAME")

        exit_message(
            "Foram encontradas vulnerabilidades com prioridade BLOCKER e CRITICAL pelo Trivy. "
            "Será necessário corrigi-las para continuar, confira os detalhes aqui:\n"
            f"{issues_url}?branch={ci_commit_branch}&id={sonar_project_key}&resolved=false&types=VULNERABILITY"
        )
    else:
        print_message(
            "Parabéns! nenhuma vulnerabilidade foi encontrada nos reports do Trivy!",
            Fore.GREEN,
        )
