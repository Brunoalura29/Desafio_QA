from datetime import datetime, timedelta

from common import get_env_variable, get_env_variable_required
from common.graphql_client import GraphqlClient

from .custom_issue import CustomIssue


class CheckTags:
    def __init__(self, client_graphql: GraphqlClient = GraphqlClient()) -> None:
        self.client_graphql = client_graphql

    def check(self):
        """Check for tags on project"""

        query = """
            query ($projectId: Int!) {
                checkForTags(
                    projectId: $projectId
                ) {
                    success
                    reason
                }
            }
        """

        params = {
            "projectId": int(get_env_variable_required("CI_PROJECT_ID")),
        }

        result = self.client_graphql.call(query, params)

        output = CheckTagsOutput(result["checkForTags"])

        return output


class CheckTagsOutput:
    def __init__(self, result: dict) -> None:
        self.success = result["success"]
        self.reason = result["reason"]


def check_tags():
    skip_check_tags = get_env_variable("SKIP_CHECK_TAGS")

    if not skip_check_tags:
        graphql_client = GraphqlClient()

        tags_checker = CheckTags(graphql_client)
        result_check = tags_checker.check()

        if not result_check.success:
            custom_issues = CustomIssue(graphql_client)
            custom_issues.rule = "MISSING_SONAR_TAGS"
            custom_issues.description = (
                "NÃ£o foram encontradas tags do sonar no projeto."
            )
            custom_issues.notification_text = result_check.reason

            today = datetime.today()
            next_week = today + timedelta(days=7)

            custom_issues.must_be_fixed_until = next_week

            custom_issues.create()
