import json
from os.path import join

from colorama import Fore

from common import exit_message, print_message
from common.file_helpers import get_files_by_extension
from common.getopt_helper import GetOptBuilder, Param


class TranslationsValidatorFrontend(GetOptBuilder):
    _translations_path = ""
    _translations_files = None

    def __init__(self, argv):
        builder = super()
        builder.__init__(argv)

        _param_translations_path = Param(
            "translations_path", default_value="src/locale"
        )

        builder.add_params([_param_translations_path])

        print_message("Carregando parâmetros para inicialização da análise")

        builder.build()

        self._translations_path = _param_translations_path.get_param_value()
        self._translations_files = get_files_by_extension(
            self._translations_path, ".json"
        )
        if len(self._translations_files) == 0:
            raise ValueError(
                f"Nenhum arquivo de tradução foi encontrado em: {self._translations_path}"
            )

        print_message("Iniciando validação de chaves de traduções declaradas")

        self._translations_files = get_files_by_extension(
            self._translations_path, ".json"
        )
        print_message(
            f"Lista de arquivo de traduçõess localizado:{self._translations_path}"
        )

    def _load_all_translations_keys(self):
        _all_translations_keys = set()
        for _file in self._translations_files:
            _absolute_path = join(self._translations_path, _file)
            try:
                with open(_absolute_path, encoding="utf-8") as json_file:
                    print_message(
                        f"Lendo as chaves de tradução definidas em:{_absolute_path}"
                    )
                    _data = json.load(json_file)
                    _items = [key for key, value in _data.items()]
                    _all_translations_keys.update(_items)
            except UnicodeError as err:
                raise UnicodeError(
                    f"O arquivo contem caracteres não unicode, por favor substitua eles {err}"
                ) from err
        print_message("Todas as chaves de tradução foram carregadas...")
        return _all_translations_keys

    def _check_translations_keys(self, _all_translations_keys):
        print_message(
            "Iniciando verificação de declaração de chave nos arquivos de tradução"
        )

        do_contain_violations = False

        for _file in self._translations_files:
            _absolute_path = join(self._translations_path, _file)
            try:
                with open(_absolute_path, encoding="utf-8") as json_file:
                    print_message(
                        f"Verificando chaves de tradução declaradas em:{_absolute_path}"
                    )
                    _data = json.load(json_file)
                    do_contain_violations = self._is_translation_key_violation_in_file(
                        _all_translations_keys, _data, _file, do_contain_violations
                    )
            except UnicodeError as err:
                raise UnicodeError(
                    f"O arquivo contem caracteres não unicode, por favor substitua eles {err}"
                ) from err

        if do_contain_violations:
            exit_message(
                "Validação dos arquivos de traduções falhou, por favor cheque as mensagens acima para mais detalhes."
            )

    def _is_translation_key_violation_in_file(
        self, _all_translations_keys, _data, _file, do_contain_violations
    ):
        for _key in _all_translations_keys:
            if _data.get(_key) is None:
                print_message(
                    f"Chave: {_key} não declarada no arquivo de tradução:{_file}",
                    fore_color=Fore.RED,
                )
                do_contain_violations = True
        return do_contain_violations

    def execute(self):
        _translations_keys = self._load_all_translations_keys()
        self._check_translations_keys(_translations_keys)
