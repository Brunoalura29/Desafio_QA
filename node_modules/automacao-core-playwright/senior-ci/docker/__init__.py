"""Docker functions"""

import os
import pathlib
import xml.etree.ElementTree as ET

from colorama import Fore

from common import (
    ExitCode,
    exec_command,
    exit_message,
    get_env_variable,
    get_env_variable_required,
    get_version,
    is_path_exist,
    print_message,
)
from common.extensions import Extensions
from common.graphql_client import GraphqlClient

DOCKERHUB_ORG_NAME = "seniorsa"

extensions = Extensions()


def build_image():
    image_name = get_image_name()

    docker_login()

    sci_dockerfile_path = get_env_variable("SCI_DOCKERFILE_PATH", "Dockerfile")

    extensions.before_build()

    print_message(f"Realizando build da a imagem {image_name}")

    exec_command(
        f"docker image build --network host -t {DOCKERHUB_ORG_NAME}/{image_name} -f {sci_dockerfile_path} .",
        error_message="Ocorreu uma falha no build da imagem.",
    )

    _save_image(image_name)

    extensions.after_build()


def push_image(version: str = None):
    image_name = get_image_name()

    build_image()

    docker_login()

    if not version:
        version = get_version()

    exec_command(
        f"docker tag {DOCKERHUB_ORG_NAME}/{image_name} {DOCKERHUB_ORG_NAME}/{image_name}:{version}"
    )

    create_repository(image_name)

    extensions.before_packaging()

    print(" ")
    print_message(
        f"Fazendo push da imagem {DOCKERHUB_ORG_NAME}/{image_name} e versão {version} para o DockerHub"
    )

    exec_command(
        f"docker push {DOCKERHUB_ORG_NAME}/{image_name}:{version}",
        error_message="Erro ao realizar push da imagem.",
    )

    print(" ")
    print_message(
        f"Versão {version} da {DOCKERHUB_ORG_NAME}/{image_name} enviada ao DockerHub",
        Fore.GREEN,
    )

    extensions.after_packaging()


def create_repositories(pathname: str):
    """
    Cria os repositórios com base nos pom.xml que utilizam o plugin dockerfile-maven-plugin
    """

    images = _enumerate_repositories(pathname)
    for image in images:
        create_repository(image)


def docker_login():
    dockerhub_username = get_env_variable_required("DOCKERHUB_USERNAME")
    dockerhub_pass = get_env_variable_required("DOCKERHUB_PASS")

    result = exec_command(f"docker login -u {dockerhub_username} -p {dockerhub_pass}")

    if result.exit_code == ExitCode.ERROR:
        exit_message("Falha ao realizar o login do docker.")


def get_image_name() -> str:
    ci_project_name = get_env_variable_required("CI_PROJECT_NAME")

    image_name = get_env_variable("SCI_SVC_IMAGE", ci_project_name)
    return (
        image_name.replace("-frontend", "")
        .replace("-backend", "")
        .replace("-mobile", "")
    )


def create_repository(image_name: str):
    ci_project_name = get_env_variable_required("CI_PROJECT_NAME")

    mutation = """
        mutation($repository: String, $gitRepo: String) {
          createDockerhubRepo(repository: $repository, gitRepo: $gitRepo) {
            result
          }
        }
      """

    params = {"repository": image_name, "gitRepo": ci_project_name}

    print_message(f"Criando repositório no DockerHub: {image_name}")

    client = GraphqlClient()

    client.call(mutation, params)


def _enumerate_repositories(pathname: str):
    """
    Lista todas as imagens docker de todos os pom.xml do repositório git
    """

    print_message("Listando os repositórios dockerhub a serem criados")

    docker_image_xpath = "./build/plugins/plugin[artifactId='dockerfile-maven-plugin']/configuration/repository"

    result = []
    source_path = pathlib.Path(pathname)
    for item in source_path.rglob("pom.xml"):
        if item.is_file():
            imgs = _resolve_xpath(item, docker_image_xpath)
            pom = str(item)
            for img in imgs:
                out = exec_command(
                    f"mvn exec:exec -q -Dexec.executable=echo -Dexec.args='{img}' -f {pom}",
                    False,
                    False,
                )

                print_message(f"Imagem docker encontrada: {out.output}")

                parts = out.output.split("/")
                result.append(parts[1].strip())

    return result


def _resolve_xpath(xml_path: pathlib.Path, xpath: str):
    xml = xml_path.open()
    root = ET.parse(xml)
    root = root.getroot()
    _strip_namespace(root)
    elements = root.findall(xpath)

    result = []
    for element in elements:
        result.append(element.text)

    return result


def _strip_namespace(element):
    """
    Remove o namespace das tags do XML para simplificar a pesquisa por xpath
    """

    _, has_namespace, postfix = element.tag.partition("}")
    if has_namespace:
        element.tag = postfix
    for child in element:
        _strip_namespace(child)


def _save_image(image_name=None):
    print(" ")
    print_message(f"Salvando imagem {DOCKERHUB_ORG_NAME}/{image_name}")

    if not is_path_exist("./docker_images"):
        os.mkdir("docker_image")

    exec_command(f"docker save -o docker_image/{image_name}.tar seniorsa/{image_name}")


def load_image(image_name=None) -> None:
    if not image_name:
        image_name = get_image_name()
    exec_command(f"docker load -i docker_image/{image_name}.tar")
