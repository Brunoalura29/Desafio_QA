#!/bin/bash

echo "----------------------------------------------------------------------------------"
echo "[CI] Variáveis:"
echo "[CI] - SCI_VERSION=$SCI_VERSION"
echo "[CI] - CANNED_ACL=$CANNED_ACL"
echo "[CI] - CDN_PATH=$CDN_PATH"
echo "[CI] - SOURCE_FOLDER_NPM=$SOURCE_FOLDER_NPM"
echo "----------------------------------------------------------------------------------"

set -e # Exit at first error

# Import release helpers
. senior-ci/common/release-helpers.sh

# Import notification helpers
. senior-ci/common/notification-helpers.sh

# Senior CI Extensions
. senior-ci/common/senior-ci-extensions-helpers.sh

# Import npm struture helpers
. senior-ci/common/npm-helper.sh


HELP_MESSAGE="Caso tenha qualquer dúvida sobre o processo, consulte nossa Wiki - https://git.senior.com.br/devops/senior-ci/wikis/home"

prepareVersionSnapshot() {
    if [[ $VERSION = *"-SNAPSHOT"* ]]; then
        UUID_VERSION=$(get_attribute "version\":")-$(uuidgen)
        echo "npm --no-git-tag-version version $UUID_VERSION"
        npm --no-git-tag-version version $UUID_VERSION
        TAG_NPM="--tag $VERSION"
    fi
}


packing() {

    echo "[CI] Iniciando processo de publicação do projeto."

    if [ "$CDN_PATH" ]; then
      : "${CANNED_ACL:?CANNED_ACL não configurado no cluster.}"

      npm --version
      echo "[CI] Publicando a versão $VERSION no bucket S3 do CDN - $CDN_PATH/$VERSION"
      aws s3 cp dist s3://$CDN_PATH/$VERSION --recursive --acl $CANNED_ACL
    fi

    : "${NPM_TOKEN:?Configure a variável NPM_TOKEN nas settings do seu projeto no GitLab. $HELP_MESSAGE}"
    echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" > .npmrc

    echo "[CI] Publicando o pacote no NPM Registry - //registry.npmjs.org"
    if [ "$NPM_TOKEN" ]; then
        npm config set registry https://registry.npmjs.org/
    fi

    echo "npm publish $SOURCE_FOLDER_NPM --access public $TAG_NPM"
    npm publish $SOURCE_FOLDER_NPM --access public $TAG_NPM
}

getopts "bsrpx" op;
case "$op" in

  b) echo "[CI] Executando compilação e validação de formatação do código"
      python3 senior-ci/common/validations/changelog
      python3 senior-ci/common/validations/issues

      install

      call_extension "before_build"
      npm run build
      npm run lint --if-present
      call_extension "after_build"
      ;;

  s)  echo "[CI] Realizando release: SNAPSHOT"
      install

      call_extension "before_release_snapshot"
      VERSION="$2-SNAPSHOT"
      prepareVersionSnapshot
      npm run build
      packing
      call_extension "after_release_snapshot"
      ;;

  r)  echo "[CI] Realizando release: $2"
      python3 senior-ci/common/validations/issues

      unshallow_repo

      get_next_version $2

      create_release_branch

      call_extension "before_release"

      npm version --no-git-tag-version "$VERSION"
      [[ -f bower.json ]] && sed -i -E "s/(\"version\":[[:space:]]*\").+(\")/\1${VERSION}\2/g" bower.json

      call_extension "before_change_changelog"

      update_changelog

      call_extension "after_change_changelog"

      create_release_tag

      call_extension "after_release"

      echo "[CI] Criação da release versão $VERSION realizado com sucesso. Execute o job 'package' para publicar esta versão no CDN e NPM Registry."

      notify_release_teams_channel
     ;;

  p)  echo "[CI] Publicação da versão"
      install

      call_extension "before_packaging"

      VERSION=$(git describe --exact-match --tags | grep "^v[0-9]\{1,\}-[0-9]\{1,\}-[0-9]\{1,\}$" | sed "s/-\([[:digit:]]\)/\.\1/g" | sed 's/^\s*.//g')
      if [ -z "${VERSION}" ]; then
        VERSION=$(get_attribute "version\":")
      fi

      npm run build
      packing

      USER_DEPLOY_MAIL="${GITLAB_USER_EMAIL%@senior.com.br}"
      DEPLOY_TEAMS_MESSAGE="O usuário $USER_DEPLOY_MAIL liberou a versão <$CI_PROJECT_URL/blob/$CI_COMMIT_REF_NAME/CHANGELOG.md#anchor-$VERSION_WITHOUT_DOTS|$VERSION> do projeto $CI_PROJECT_NAME."

      call_extension "after_packaging"

      notify_text_teams_channel "$DEPLOY_TEAMS_MESSAGE"

      echo "[CI] Versão $VERSION publicada com sucesso!"
      ;;

  x)  echo "[CI] Realizando validação de testes e análise no SonarQube"
      python3 senior-ci/common/validations/issues
      SKIP_BUILD=`python3 senior-ci/common/validations/buildable`

      call_extension "before_build"

      if [ "$SKIP_BUILD" = "False" ]; then
        install
        npm test
      fi

      call_extension "after_build"

      python3 senior-ci/ci/sonar_scanner.py -s $SKIP_BUILD
      ;;

esac
