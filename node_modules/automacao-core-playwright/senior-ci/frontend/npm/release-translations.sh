#!/bin/bash

LOCALE_DIR="${TRANSLATIONS_DIR:-src/locale}"
DEFAULT_LANG=pt-BR.json
DEFAULT_LANG_FILE=$LOCALE_DIR/$DEFAULT_LANG
LOCALES=$(ls $LOCALE_DIR | grep -v "$DEFAULT_LANG" | grep '\.json$')
PRETTY_LOCALES=$(ls $LOCALE_DIR -1 | grep -v "$DEFAULT_LANG" | grep '\.json$' | tr '\n' ' ')

upload_to_translation_hub() {

  CURRENT_LANG_FILE=$1
  LANG_DEF=$2

  echo "[CI] Sending $CURRENT_LANG_FILE to Translation Hub"
  JSON=$(cat $CURRENT_LANG_FILE | jq --compact-output --raw-output '.')

  echo "[CI] Requesting storage to JackRabbit token - $TOKEN"

  JACKRABBIT_RESPONSE=$(curl -s -k "$CI_ENVIRONMENT_URL/platform/translation_hub/queries/requestImportTranslations" -H "Pragma: no-cache" -H "Cache-Control: no-cache" -H "Accept-Encoding: gzip, deflate, br" -H "Accept: application/json, text/plain, */*" -H "$TOKEN" -H "Connection: keep-alive" --compressed)
  PROJECT_ID=$(echo $JACKRABBIT_RESPONSE | jq --raw-output '.id')
  URL=$(echo $JACKRABBIT_RESPONSE | jq --raw-output '.url')


  echo "[CI] Done. Storage URL: $URL"
  printf "\r\n"
  printf "\r\n"

  echo "[CI] Sending translation file to JackRabbit"
  FILE_RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" -k "$URL" -X PUT --data-binary "$JSON" --compressed)
  printf "Sent! Response: \r\n"
  echo "$FILE_RESPONSE"

  echo "[CI] Sending translation metadata to Translation Hub"

  LANG_META_JSON=$(jq -n --compact-output --arg id $PROJECT_ID --arg lang $LANG_DEF '{"id":$id,"language":$lang,"format":"FLAT_JSON"}')
  printf "Metadata to be sent: \r\n"
  echo "$LANG_META_JSON"

  echo "..."

  META_RESPONSE=$(curl -k -X POST "$CI_ENVIRONMENT_URL/platform/translation_hub/signals/importTranslations" -H 'Pragma: no-cache' -H 'Cache-Control: no-cache' -H 'Accept-Encoding: gzip, deflate, br' -H 'Accept: application/json, text/plain, */*' -H 'Content-Type: application/json;charset=UTF-8' -H "$TOKEN" -H 'Connection: keep-alive' --data-binary "$LANG_META_JSON" --compressed)
  printf "Sent! Response: \r\n"
  echo "$META_RESPONSE"
}



echo ""
echo "[CI] Checking TRANSLATIONS_USER, TRANSLATIONS_PASS, TENANT, DOMAIN and SERVICE project variables existance"
[[ -z "$TRANSLATIONS_USER" ]] && echo "Variable TRANSLATIONS_USER was not found. Please create a variable named TRANSLATIONS_USER in the project settings and try again." && exit 1
[[ -z "$TRANSLATIONS_PASS" ]] && echo "Variable TRANSLATIONS_PASS was not found. Please create a variable named TRANSLATIONS_PASS in the project settings and try again." && exit 1
[[ -z "$TENANT" ]] && echo "Variable TENANT was not found. Please create a variable named TENANT in the project settings and try again." && exit 1
[[ -z "$DOMAIN" ]] && echo "Variable DOMAIN was not found. Please create a variable named DOMAIN in the project settings and try again." && exit 1
[[ -z "$SERVICE" ]] && echo "Variable SERVICE was not found. Please create a variable named SERVICE in the project settings and try again." && exit 1
echo "[CI] Found TRANSLATIONS_USER, TRANSLATIONS_PASS, TENANT, DOMAIN and SERVICE variables! TRANSLATIONS_USER - '$TRANSLATIONS_USER' | TENANT - '$TENANT' | DOMAIN - '$DOMAIN' | SERVICE = '$SERVICE' existance"
echo ""

echo ""
echo "[CI] Checking if default locale directory exists ($LOCALE_DIR) and if default lang file exists ($DEFAULT_LANG_FILE)"
[[ ! -d "$LOCALE_DIR" ]] && echo "Directory $LOCALE_DIR was not found, cannot Release Translations." && exit 1
[[ ! -e "$DEFAULT_LANG_FILE" ]] && echo "File $DEFAULT_LANG_FILE was not found, cannot Release Translations." && exit 1
echo "[CI] Successfully checked default locale directory ($LOCALE_DIR) and default language file ($DEFAULT_LANG_FILE) existance. Everything is looking good."
echo ""
printf "\r\n"
printf "\r\n"

echo "[CI] Starting Release Translations"
printf "\r\n"
printf "\r\n"


echo "[CI] Download fetch-translations repo"
curl --output archive.tar.gz --header "PRIVATE-TOKEN: gewEZA_iVSWthG_HouBt" "https://git.senior.com.br/api/v4/projects/1401/repository/archive.tar.gz"

echo "[CI] Extract fetch-translations"
mkdir -p fetch-translations && tar xf archive.tar.gz -C fetch-translations --strip-components 1

echo "[CI] Install fetch-translations dependencies"
cd fetch-translations
echo "[CI] Node - $(which node) - $(node --version)"
echo "[CI] NPM - $(which npm) - $(npm --version)"
npm install
cd ..

echo "[CI] Logging into Senior X Platform"

TOKEN=$(curl -s -k -X POST "$CI_ENVIRONMENT_URL/platform/authentication/actions/login" -H "Content-Type: application/json" --insecure -d '{ "username": "'$TRANSLATIONS_USER'", "password": "'$TRANSLATIONS_PASS'"}' ${CI_DEBUG_TRACE:+--trace-ascii /dev/stderr} | jq --raw-output '.jsonToken | fromjson | "Authorization: " + .token_type + " " + .access_token')

echo "[CI] Successfully logged in."
printf "\r\n"
printf "\r\n"

echo "Creating release branch"
git fetch --all --tags --prune
git checkout develop
git reset --hard origin/develop

TIMESTAMP=$(date +"%Y%m%d%H%M%S")
BRANCH_NAME=release/translations-$TIMESTAMP
git checkout -B $BRANCH_NAME
echo "[CI] Created branch $BRANCH_NAME from develop"
echo ""
echo "[CI] Searching for missing keys in the following files: $PRETTY_LOCALES"

for LANG in $LOCALES
do
  LANG_DEF="${LANG%.*}"
  CURRENT_LANG_FILE=$LOCALE_DIR/$LANG

  fetch-translations/index.js --environment=$CI_ENVIRONMENT_NAME --tenant=$TENANT --domain=$DOMAIN --service=$SERVICE --lang=$LANG_DEF | jq '.' > $CURRENT_LANG_FILE

  KEYS_MATCH=$(jq -n --slurpfile PT $DEFAULT_LANG_FILE --slurpfile LN $CURRENT_LANG_FILE '$PT | .[0] | keys as $PT | $LN | .[0] | keys as $LN | $LN == $PT')
  echo "[CI] Checking language file $CURRENT_LANG_FILE"
  echo "[CI] Q: Does $DEFAULT_LANG_FILE have the same keys as $CURRENT_LANG_FILE?"
  echo "[CI] A: $KEYS_MATCH"
  printf "\r\n"

  if [ "$KEYS_MATCH" != "true" ];
    then

      echo "[CI] Merging missing keys into $CURRENT_LANG_FILE"
      CURRENT_LANG_MERGED_CONTENT=$(jq -n --slurpfile PT $DEFAULT_LANG_FILE --slurpfile LN $CURRENT_LANG_FILE '$PT | .[0] as $PT | keys as $PT_KEYS | $LN | .[0] as $LN | keys as $LN_KEYS | $PT + $LN as $MERGED | $MERGED')
      echo "$CURRENT_LANG_MERGED_CONTENT" | jq '.' > $CURRENT_LANG_FILE

      echo "[CI] Successfully updated $CURRENT_LANG_FILE"
      printf "\r\n"
      printf "\r\n"

      upload_to_translation_hub $CURRENT_LANG_FILE $LANG_DEF

      git commit -a -m "Atualizando arquivo de tradução $CURRENT_LANG_FILE" -m "[skip ci]" -m "[auto release]"

      SHOULD_PUSH=TRUE
    else
      echo "[CI] Files $CURRENT_LANG_FILE and $DEFAULT_LANG_FILE have the same keys. Nothing to do here."
  fi
done

echo "[CI] Publishing default lang file to Translation Hub"

DEFAULT_LANG_DEF="${DEFAULT_LANG%.*}"
upload_to_translation_hub $DEFAULT_LANG_FILE $DEFAULT_LANG_DEF

if [ "$SHOULD_PUSH" = "TRUE" ];
    then
    CI_REPOSITORY_URL_FOR_PUSH=$(echo "$CI_REPOSITORY_URL" | sed -e "s|.*@\(.*\)|git@\1|" -e "s|/|:|" )
    git remote set-url --push origin "$CI_REPOSITORY_URL_FOR_PUSH"

    echo "[CI] Preparing to push changes"

    git status

    echo "[CI] Checking out develop branch"
    git checkout develop

    echo "[CI] Merging banch $BRANCH_NAME into develop"
    git merge $BRANCH_NAME
    git status

    echo "[CI] Pushing changes"
    git push
fi

echo "[CI] Successfully updated translations!"
