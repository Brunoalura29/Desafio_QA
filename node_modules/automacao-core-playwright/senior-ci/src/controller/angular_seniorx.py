import json
import os
import tarfile
from pathlib import Path

import boto3

from common import get_env_variable, get_env_variable_required
from src.interface.angular_project import AngularProjectInterface


class AngularSeniorX(AngularProjectInterface):
    def __init__(self):
        super().__init__()

        self._frontend_compressed_file_name = "frontend.tar.gz"

    def _build(self):
        if self.sci_deploy_cdn:
            self._build_to_cdn()
        else:
            self._execute_npm_command("build --production")

    def package(self):
        ci_project_name = get_env_variable_required("CI_PROJECT_NAME")
        sci_frontend_updater_bucket_name = get_env_variable_required(
            "SCI_FRONTEND_UPDATER_BUCKET_NAME"
        )
        sci_frontend_updater_role_arn = get_env_variable(
            "SCI_FRONTEND_UPDATER_ROLE_ARN"
        )

        app_name, domain, service, version = self._get_application_details()

        app_detail_path = f"{app_name}/{domain}/{service}/{version}"

        with open("dist/frontend-info.json", "w", encoding="utf-8") as frontend_info:
            json.dump(
                {
                    "version": version,
                    "app_name": app_name,
                    "domain": domain,
                    "service": service,
                },
                frontend_info,
                indent=2,
            )

        with tarfile.open(self._frontend_compressed_file_name, "w:gz") as tar:
            tar.add("dist", arcname=".")

        with tarfile.open(f"{ci_project_name}.tar.gz", "w:gz") as tar:
            tar.add("dist", arcname=ci_project_name)

        del os.environ["AWS_ACCESS_KEY_ID"]
        del os.environ["AWS_SECRET_ACCESS_KEY"]

        sts_client = boto3.client("sts")
        assumed_role = sts_client.assume_role(
            RoleArn=sci_frontend_updater_role_arn, RoleSessionName="FrontendUpdater"
        )
        credentials = assumed_role["Credentials"]

        s3_client = boto3.client(
            "s3",
            aws_access_key_id=credentials["AccessKeyId"],
            aws_secret_access_key=credentials["SecretAccessKey"],
            aws_session_token=credentials["SessionToken"],
        )
        s3_client.upload_file(
            f"{ci_project_name}.tar.gz",
            "senior-frontend",
            f"{ci_project_name}/{version}/{ci_project_name}.tar.gz",
            ExtraArgs={
                "GrantRead": 'uri="http://acs.amazonaws.com/groups/global/AllUsers"'
            },
        )

        Path(self._frontend_compressed_file_name).rename(
            Path("dist") / self._frontend_compressed_file_name
        )

        for path in Path("dist").rglob("*"):
            if path.is_file():
                s3_client.upload_file(
                    str(path),
                    sci_frontend_updater_bucket_name,
                    f"{app_detail_path}/{str(path.relative_to('dist'))}",
                    ExtraArgs={"ACL": self.sci_frontend_bucket_acl},
                )

        if self.sci_deploy_cdn:
            self._deploy_to_cdn()

    def _build_to_cdn(self):
        sci_cdn_url = get_env_variable_required("SCI_CDN_URL")

        app_name, domain, service, version = self._get_application_details()

        app_detail_path = f"{app_name}/{domain}/{service}/{version}"

        self._execute_npm_command(
            f"build --production -- --deploy-url {sci_cdn_url}/{app_detail_path}"
        )
