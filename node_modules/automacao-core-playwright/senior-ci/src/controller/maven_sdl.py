from pathlib import Path

from common import exit_message, get_env_variable_required
from common.file_helpers import load_sdl_properties
from common.sonar_helper import SonarHelper, SonarScannerType
from src.interface.maven_project import MavenProjectInterface


class MavenSDL(MavenProjectInterface):
    def __init__(self) -> None:
        super().__init__()
        self.properties = load_sdl_properties()

        if not self.properties:
            exit_message(
                "O projeto está usando o script de SDL porém não possui "
                "nenhuma propriedade no/não possui o arquivo sdl.properties."
            )

        self.generator_java_output = self._get_java_output()
        self.output_pom_exists = Path(f"{self.generator_java_output}/pom.xml").is_file()
        self.sources_generated = False

    def set_version(self, new_version=None):
        new_version = new_version or self.version

        self._replace_line_in_file(
            "sdl.properties",
            "generator.app.version=",
            f"generator.app.version={new_version}",
        )

        self._execute_mvn_command(
            f"versions:set -DgenerateBackupPoms=false -DnewVersion={new_version}"
        )

        if self.output_pom_exists or self._custom_parent_file():
            self._execute_mvn_command(
                f"versions:set -DgenerateBackupPoms=false -DnewVersion={new_version} "
                f"-DprocessAllModules -N versions:update-child-modules --file {self.generator_java_output}"
            )
        else:
            self._run_generate_sources()

    def generate(self):
        super().generate()

        if self.output_pom_exists:
            self._run_generate_sources()

    def compile(self):
        if self.buildable_project.skip_build():
            return

        self._execute_mvn_command(
            f"install -DskipTests=true -Ddockerfile.skip=true --file {self.generator_java_output}"
        )

    def unit_test(self):
        if self.buildable_project.skip_build():
            return

        self._execute_mvn_command(
            f"install -Ddockerfile.skip=true --file {self.generator_java_output}"
        )

    def sonar_scanner(self):
        sonar_helper = SonarHelper(
            sonar_scanner_type=SonarScannerType.SDL,
            skip_build=self.buildable_project.skip_build(),
        )
        sonar_helper.scanner_analyze()

    def package(self):
        self._docker_utils()
        self._execute_mvn_command(
            f"deploy -DskipTests=true --file {self.generator_java_output}"
        )

    def _get_java_output(self) -> str:
        try:
            output = self.properties["generator.java.output"]
        except KeyError:
            output = get_env_variable_required("GENERATOR_JAVA_OUTPUT")

        return output

    @staticmethod
    def _replace_line_in_file(file_path, line_to_find, new_line):
        file_path = Path(file_path)

        if not file_path.is_file():
            exit_message(f"File {file_path} not found")

        # Open the file in read mode and read lines
        with open(file_path, "r", encoding="utf-8") as file:
            lines = file.readlines()

        # Replace the line
        for i, line in enumerate(lines):
            if line.startswith(line_to_find):
                lines[i] = new_line + "\n"
                break

        # Open the file in write mode and write the modified lines
        with open(file_path, "w", encoding="utf-8") as file:
            file.writelines(lines)

    def _run_generate_sources(self):
        if not self.sources_generated:
            self._execute_mvn_command("generate-sources")
            self.sources_generated = True

    def _custom_parent_file(self):
        if "generator.java.parent.pom.custom" in self.properties:
            self._run_generate_sources()
            return True
        return False
