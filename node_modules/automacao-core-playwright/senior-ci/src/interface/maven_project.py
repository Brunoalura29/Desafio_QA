from pathlib import Path

from common import ExitCode, exec_command, exit_message, get_env_variable, get_version
from common.file_helpers import get_svc_name
from common.sonar_helper import SonarHelper, SonarScannerType
from docker import create_repository, docker_login
from src.interface.project import ProjectInterface


class MavenProjectInterface(ProjectInterface):
    def __init__(self) -> None:
        super().__init__()

        if self.buildable_project.skip_build():
            return

        self.pom_xml = Path("pom.xml")

        if not self.pom_xml.is_file():
            exit_message(
                "O projeto está usando o script de Maven porém não possui o pom.xml"
            )

        self.version = self._get_version()

    def set_version(self, new_version=None):
        new_version = new_version or self.version

        if "<tycho-version>" in self.pom_xml.read_text(encoding="utf-8"):
            self._execute_mvn_command(
                f"org.eclipse.tycho:tycho-versions-plugin:1.7.0:set-version -DnewVersion={new_version}"
            )
        else:
            self._execute_mvn_command(
                f"versions:set -DgenerateBackupPoms=false -DnewVersion={new_version}"
            )

    def validate(self):
        super().validate()

        if self.buildable_project.skip_build():
            return

        self._execute_mvn_command("validate")

    def generate(self):
        if self.buildable_project.skip_build():
            return

        self.set_version()

    def compile(self):
        if self.buildable_project.skip_build():
            return

        self._execute_mvn_command("compile")

    def unit_test(self):
        if self.buildable_project.skip_build():
            return

        self._execute_mvn_command("test")

    def sonar_scanner(self):
        sonar_helper = SonarHelper(
            sonar_scanner_type=SonarScannerType.MAVEN,
            skip_build=self.buildable_project.skip_build(),
        )
        sonar_helper.scanner_analyze()

    def package(self):
        self._docker_utils()
        self._execute_mvn_command("deploy -DskipTests=true")

    @staticmethod
    def _docker_utils():
        docker_login()
        create_repository(get_svc_name())

    def _execute_mvn_command(self, command):
        maven_args = get_env_variable("MAVEN_ARGS")

        if self.sci_debug:
            maven_args = f"{maven_args} --show-version -X"

        command_result_mvn = exec_command(f"mvn {maven_args} {command}")

        if command_result_mvn.exit_code == ExitCode.ERROR:
            exit_message("Maven command failed. Exiting...")

    def _get_version(self) -> str:
        version = get_version()

        if "<tycho-version>" in self.pom_xml.read_text(encoding="utf-8"):
            with self.pom_xml.open(encoding="utf-8") as file:
                for line in file:
                    if "<version>" in line:
                        tycho_project_version = line.split(">")[1].split("<")[0]
                        if (
                            len(tycho_project_version.split(".")) <= 3
                            and len(version.split("-")) >= 2
                        ):
                            version = (
                                f"{tycho_project_version}-{version.split('-')[-1]}"
                            )
                        else:
                            version = tycho_project_version
                        break

        return version
