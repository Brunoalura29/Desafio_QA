from abc import ABC, abstractmethod

from common import get_env_variable, get_env_variable_required
from common.file_helpers import load_properties
from common.trivy_helper import scan_vulnerabilities
from common.validations.buildable import BuildableProject
from common.validations.changelog.validate import ValidateChangelog
from common.validations.issues import check_and_validate_issues


class ProjectInterface(ABC):
    def __init__(self) -> None:
        self.buildable_project = BuildableProject()
        self.sci_debug = get_env_variable("SCI_DEBUG")
        self.ci_project_dir = get_env_variable_required("CI_PROJECT_DIR")

    def validate(self):
        skip_changelog_validation = get_env_variable("SKIP_CHANGELOG_VALIDATION")

        if not skip_changelog_validation:
            validate_changelog = ValidateChangelog()
            validate_changelog.validate()

        check_and_validate_issues()

    @abstractmethod
    def compile(self):
        pass

    @abstractmethod
    def unit_test(self):
        pass

    def trivy_scan_vulnerabilities(self):
        scan_vulnerabilities(self._sources_to_be_scanned())

    @abstractmethod
    def sonar_scanner(self):
        pass

    def _sources_to_be_scanned(self):
        sonar_properties = load_properties("sonar-project.properties")
        sources_string = (
            sonar_properties["sonar.sources"]
            if sonar_properties and "sonar.sources" in sonar_properties
            else self.ci_project_dir
        )
        return sources_string.split(",")

    @abstractmethod
    def package(self):
        pass
