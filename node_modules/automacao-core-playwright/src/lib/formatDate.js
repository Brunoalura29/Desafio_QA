
const { ptBR } = require('date-fns/locale');
const moment = require('moment');
const { addDays, addMonths, addYears, parse, format, addHours, addMinutes, addSeconds } = require('date-fns');
const dotenv = require('dotenv');
dotenv.config();

export class FormatDate {

  constructor(page) {
    this.page = page;
  }
  /**
   * Retorna a data atual no formato 'MM/DD/AAAA'.
   * @returns {string} - A data atual no formato 'MM/DD/AAAA'.
   */
  async pegaDataAtualComBarrasMesDiaAno() {
    return moment().format('MM/DD/YYYY');
  }
  /**
 * Função para obter uma data com um deslocamento de dias, meses e anos específicos.
 * @param {number} dias - A quantidade de dias para adicionar (pode ser negativo para datas anteriores).
 * @param {number} meses - A quantidade de meses para adicionar (pode ser negativo para meses anteriores).
 * @param {number} anos - A quantidade de anos para adicionar (pode ser negativo para anos anteriores).
 * @param {boolean} formato - O formato da data (false para 'dd/mm/yyyy' e true para 'yyyy-mm-dd').
 * @return {string} - A data formatada.
 */
  pegaDataComBarras(dias = 0, meses = 0, anos = 0, formato = false) {
    let dataAtual = new Date();

    dataAtual = addDays(dataAtual, dias);
    dataAtual = addMonths(dataAtual, meses);
    dataAtual = addYears(dataAtual, anos);

    if (formato) {
      return format(dataAtual, 'yyyy-MM-dd');
    }
    return format(dataAtual, 'dd/MM/yyyy');
  }
  /**
    * Função que converte data formato americano para data formato brasileiro
    * @param {string} data data que deve ser convertida
    * @return data no formato brasileiro
    */
  formataDataBrasil(data) {
    return moment(data, 'YYYY-MM-DD').format('DD/MM/YYYY');
  }
  /**
  * Função que retorna por extenso a data atual.
  * @param {string} formato qual o formato de data deve retornar.
  */
  async transformarDataAtualExtenso(formato) {
    const dataAtual = new Date();

    if (formato === 'extenso') {
      return format(dataAtual, 'd \'de\' MMMM \'de\' yyyy', { locale: ptBR }); // 28 de novembro de 2020
    }
    return format(dataAtual, 'MMMM yyyy', { locale: ptBR }); // Novembro 2020
  }
  /**
    * Função que retorna por extenso uma data específicas.
    * @param {string} dataEspecificas qual a data que deve ser transformada em extenso
    * @param {string} formato qual o formato de data deve retornar
    */
  async transformarDataExtenso(dataEspecificas, formato) {
    const data = parse(dataEspecificas, 'dd/MM/yyyy', new Date());

    if (formato === 'extenso') {
      return format(data, 'd \'de\' MMMM \'de\' yyyy', { locale: ptBR }); // 28 de novembro de 2020
    }
    const mesAno = format(data, 'MMMM yyyy', { locale: ptBR }); // novembro 2020
    return mesAno.replace(/^(.)/, mesAno[0].toUpperCase()); // Novembro 2020
  }

  /**
   * busca a data atual da máquina e retorna no formato AAAA-MM-DDTHH:MM:SSZ
  */
  async getCurrentDateTime() {
    const numeroMinimoCaracteres = 2;
    const date = new Date();
    const time = date.toISOString().split('T')[1].split('.')[0];
    return `${date.getFullYear()}-` +
       `${(date.getMonth() + 1).toString().padStart(numeroMinimoCaracteres, '0')}-` +
       `${date.getDate().toString().padStart(numeroMinimoCaracteres, '0')}T` +
       `${time}Z`;
  }

  /**
   * Ajusta a data atual com base nos parâmetros fornecidos e o formata.
   *
   * @param {Object} options - Os parâmetros de ajuste da data.
   * @param {number} [options.dias=0] - Número de dias a ajustar.
   * @param {number} [options.meses=0] - Número de meses a ajustar.
   * @param {number} [options.anos=0] - Número de anos a ajustar.
   * @param {number} [options.horas=0] - Número de horas a ajustar.
   * @param {number} [options.minutos=0] - Número de minutos a ajustar.
   * @param {number} [options.segundos=0] - Número de segundos a ajustar.
   * @param {boolean} [options.formato=false] - Se true, retorna a data no formato 'yyyy-MM-dd HH:mm:ss', caso contrário 'dd/MM/yyyy HH:mm:ss'.
   * @returns {string} A data ajustada e formatada.
  */

  pegaDataHoraAtualComBarras({ dias = 0, meses = 0, anos = 0, horas = 0, minutos = 0, segundos = 0, formato = false } = {}) {
    let dataAtual = new Date();

    dataAtual = addDays(dataAtual, dias);
    dataAtual = addMonths(dataAtual, meses);
    dataAtual = addYears(dataAtual, anos);
    dataAtual = addHours(dataAtual, horas);
    dataAtual = addMinutes(dataAtual, minutos);
    dataAtual = addSeconds(dataAtual, segundos);

    const formatoDesejado = formato ? 'yyyy-MM-dd HH:mm:ss' : 'dd/MM/yyyy HH:mm:ss';
    return format(dataAtual, formatoDesejado);
  }

}
